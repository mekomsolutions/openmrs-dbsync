########################################################################################################################
#                                                                                                                      #
# This file provides a configuration template for the DB sync receiver application, it contains in-line documentation  #
# for each property. For the spring core properties, please refer to the spring boot docs for more details.            #
#                                                                                                                      #
# NOTE: For the properties that have preset values, it's recommended not to change them unless you have to, some of    #
# them have placeholders of the form ${my.other.prop.key}, it means all you need to do is set values for the property  #
# key in this file named my.other.prop.key                                                                             #
#                                                                                                                      #
########################################################################################################################


# *********************** DB sync receiver properties ******************************************************************
#
eip.home=${user.home}${file.separator}.openmrs-eip

# A comma separated list of table names and identifier mappings of entities to not sync, the identifier is typically a
# uuid table, the table name and uuid should be separated by a colon e.g.
# user:5f5c8cb5-b095-11eb-9be5-0242c0a82002,person:1d490bf4-c2cc-11de-8d13-0010c6dffd0e
db-sync.excludedEntities=

# The interval in milliseconds between polls of the retry queue by the retry route
inbound.retry.interval=1800000

# The interval in milliseconds before the first poll of the retry queue by the retry route when the application starts.
inbound.retry.initial.delay=120000

# When set to true, entity hashes are recalculated
hashes.update=false

# Specifies a comma separated list of table names containing rows for which to recalculate hashes
hashes.update.tables=

# The interval in milliseconds between polls of the sync queue, defaults to 15 seconds
#receiver.consumer.delay=

# Number of threads to be used by sync tasks process queue items in parallel, defaults to available CPU
#queue.processing.thread.number=

# Number of items to be read from the database by a queue task for processing for each execution, defaults to 1000
#task.batch.size=

# The interval in milliseconds before the first poll of the synced message queue by the cache evict and search index
# update tasks after startup, defaults to 15 seconds.
#synced.msg.task.initial.delay=

# The interval in milliseconds between polls of the synced message queue by the cache evict and search index updater
# tasks, defaults to 5 minutes
#synced.msg.task.delay=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Logging Configuration ************************************************************************
#
# Uncomment this to use console logging otherwise defaults to the logback.xml file located on the classpath which is
# configured to log to ${eip.home}/logs/openmrs-eip.log
#logging.config=classpath:logback-console.xml

# Logging level for the application loggers (all built-in routes and classes)
openmrs.eip.log.level=INFO
logging.level.oauth2-token-route=${openmrs.eip.log.level}
logging.level.receiver=${openmrs.eip.log.level}
logging.level.receiver-db-sync=${openmrs.eip.log.level}
logging.level.receiver-complex-obs-sync=${openmrs.eip.log.level}
logging.level.receiver-error-handler=${openmrs.eip.log.level}
logging.level.receiver-retry=${openmrs.eip.log.level}
logging.level.receiver-update-search-index=${openmrs.eip.log.level}
logging.level.receiver-clear-db-cache=${openmrs.eip.log.level}

# Logging level for ONLY application class loggers, feel free to add more logger configurations
logging.level.org.openmrs.eip=${openmrs.eip.log.level}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Tomcat Configuration *************************************************************************
#
# Server HTTP port
#server.port=
# ----------------------------------------------------------------------------------------------------------------------


# ****************************** Actuator Configuration ****************************************************************
#
#Whether to enable or disable all actuator endpoints by default.
management.endpoints.enabled-by-default=false
#management.endpoint.prometheus.enabled=true
#management.endpoint.health.enabled=true
#management.endpoint.health.show-details=always
#management.endpoints.web.exposure.include=health,prometheus
# ----------------------------------------------------------------------------------------------------------------------


# *********************** OpenMRS Webapp Configuration *****************************************************************
#
# The purpose of this config is so that the receiver sync app can make a rest call to trigger search index rebuild
# it processes a payload for an indexed entity e.g. person_name, person_attribute, patient_identifier etc.
# It's highly recommended that you create a specific user account for use here
#
# The base URL to the receiving OpenMRS webapp
openmrs.baseUrl=

# The username for the account to use to log into the receiver OpenMRS instance
openmrs.username=

# The password for the account to use to log into the receiver OpenMRS instance
openmrs.password=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Configuration of the openMRS database to write to *******************************************
#
# The IP address or host name of the OpenMRS MySQL database
openmrs.db.host=

# The OpenMRS MySQL database port
openmrs.db.port=

# The OpenMRS MySQL database name
openmrs.db.name=
# ---------------------------------------------------------------------------------------------------------------------


# *********************** OpenMRS Datasource config ********************************************************************
#
# Driver class of the openMRS datasource
spring.openmrs-datasource.driverClassName=com.mysql.jdbc.Driver

# Url of the openMRS datasource, you don't have to change this value as long you've set the placeholder property values
# For compatibility with MySQL 8, append the allowPublicKeyRetrieval=true parameter to the URL. For example;
# spring.openmrs-datasource.jdbcUrl=jdbc:mysql://${openmrs.db.host}:${openmrs.db.port}/${openmrs.db.name}?allowPublicKeyRetrieval=true
spring.openmrs-datasource.jdbcUrl=jdbc:mysql://${openmrs.db.host}:${openmrs.db.port}/${openmrs.db.name}

# User name of the openMRS datasource
spring.openmrs-datasource.username=

# Password of the openMRS datasource
spring.openmrs-datasource.password=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Configuration of the Management database *****************************************************
#
# Driver class of the management datasource (should not be changed in a usual use)
spring.mngt-datasource.driverClassName=

# Dialect of the management datasource (should not be changed in a usual use)
spring.mngt-datasource.dialect=

# Url of the management datasource
# When using MySQL 8 for the management database, append the allowPublicKeyRetrieval=true parameter to the URL. For example;
# spring.mngt-datasource.jdbcUrl=jdbc:mysql://mysqlUrl:3306/my-database?allowPublicKeyRetrieval=true
spring.mngt-datasource.jdbcUrl=

# User name of the management datasource
spring.mngt-datasource.username=

# Password of the management datasource
spring.mngt-datasource.password=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** ActiveMQ configuration ***********************************************************************
#
# Broker URL of the Artemis MQ broker shared with the senders (SHOULD include the protocol e.g. tcp://192.168.1.2:61616)
spring.artemis.brokerUrl=
#
# User name of the Artemis broker
spring.artemis.user=
#
# Password of the Artemis broker
spring.artemis.password=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Configuration of the ArtemisMQ endpoint to read from inbound DB sync payloads ****************
# Use either one of the following confs. JMS endpoint if activeMQ is configured or file endpoint for TESTING purposes
# Camel JMS Endpoint e.g. activemq:topic:<topic-name> or FILE Endpoint e.g. file:<folderPath> Should be absolute path
camel.input.endpoint=activemq:topic:openmrs.sync.topic?subscriptionDurable=true&durableSubscriptionName=DB-SYNC-RECEIVER&connectionFactory=activeMqConnFactory&acknowledgementModeName=CLIENT_ACKNOWLEDGE&messageListenerContainerFactory=customMessageListenerContainerFactory
activemq.clientId=DB-SYNC-REC
# ----------------------------------------------------------------------------------------------------------------------


# *************************************** Oauth Configuration **********************************************************
#
#Enabled Oauth when set to true
oauth.enabled=false

#The URL for fetching Oauth tokens from the identity provider
oauth.access.token.uri=

#The client Id of the account to use to authenticate with the identity provider
oauth.client.id=

#The client secret of the account to use to authenticate with the identity provider
oauth.client.secret=

#Authentication scope, can be multiple values separated by commas
oauth.client.scope=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Complex obs data sync configuration **********************************************************
#
# Folder path where to write complex obs data files, should be the OpenMRS complex obs data directory
openmrs.complex.obs.data.directory=
# ----------------------------------------------------------------------------------------------------------------------


# *********************** PGP configuration if encryption is necessary (OPTIONAL) **************************************
#
# Enables data encryption of incoming DB sync data, set to true if the sender application encrypts messages
openmrs.eip.dbsync.encryption.enabled=false

# Path where the keys are located
pgp.receiver.keysFolderPath=

# Password of the PGP receiver key pair
pgp.receiver.password=
# ----------------------------------------------------------------------------------------------------------------------
